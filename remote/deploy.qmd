---
title: "Deployment"
---

As we saw in [the previous chapter](intro.html), deployment of lesson content
requires two things:

1. a system provisioned with R, pandoc, and Git that is capable of installing
   any R packages (including those that require compillation or external C
   libraries).
2. access to a remote Git repository with the ability to create and push
   branches.

Point 2 is easily taken care of by any remote Git hosting service such as
GitHub, GitLab, or GitTea. Point 1 is also fairly straightforward because many
hosting services will be able to run Ubuntu or some other flavour of
Linux[^centos]. The challenge is: how do you do this in a way that is reliable,
up-to-date, and _fast_? When you consider the fact that some lessons will be
using R Markdown to render content with an arbitrary set of packages and that
those packages are not known until build time, this challenge becomes even more
difficult. 


## Provisioning R

We use the [r-lib/actions/setup-r@v2](https://github.com/r-lib/actions) action
to set up R's environmental variables. It does not actually install R because
R comes installed by default on GitHub's runners[^provision-r].

[^centos]: Perhaps not RedHat or CentOS, which are notoriously strict about
  updating their C libraries.
[^provision-r]: see <https://github.com/carpentries/sandpaper/pull/279> for
  information about how we found that out. 

## Caching


## Provisioning The Workbench

## Provisioning The Package Cache

## A bit of History

In theory, these can all be taken care of with a Docker container and, indeed,
we have written a `Dockerfile` to do just this, piggybacking off of the
[R-universe base image][rubi]. You might be wondering: why don't we use a Docker
image to build the lessons? Why do we use the runners for GitHub Actions? When
we initially built The Workbench, building R packages on Ubuntu _always_
required compilation, so we used macOS runners so that we could get compiled
packages most of the time. The key point here is _most_ of the time. 

The release cycle of R packages on CRAN will release the source of the package
first and build the binaries for macOS and Windows in the few days following.
Importantly, these binaries would have the C libraries bundled with the packages
that required them, so the installation would _just work_. During these few
days, [users will be prompted with a message][pkg-prompt] asking them if they
would like to install the binary version or compile the latest source. However,
on GitHub runners, the machine always defaulted to the latest version, so
sometimes, just after a package updated, we would get issues where a package
(e.g. [{stringi}]) would fail to compile because the proper C library was not
installed. This was especially problematic for a situation where we needed to 
provision an arbitrary set of packages for R-based lessons. 

In November 2021, we officially switched our runners over to use Ubuntu with
[carpentries/actions#31](https://github.com/carpentries/actions/pull/31) and
[carpentries/sandpaper#211](https://github.com/carpentries/sandpaper/pull/211).
These allowed us to use the binary packages from the Posit Package Manger
(previously RStudio Package Manager) to provision our builds _and_ parse the
necessary system dependencies.


[rubi]: https://github.com/r-universe-org/base-image/tree/master 
[pkg-prompt]: https://ropensci.org/blog/2023/08/01/r-universe-and-cran/#alt-cran
[{stringi}]: https://cran.r-project.org/package=stringi
